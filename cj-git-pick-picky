#!/usr/bin/perl -w

# Fri Mar 27 09:51:23 EDT 2009
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname branchname

  Cherry-pick all patches that branch has which the current branch
  doesn't have (hm also older ones? or just from the latest fork
  point??) and apply them unless their sha1 is listed in
  .git/$myname.ignore/\$branchname .

  Options:
  --dry-run

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our ($opt_dry);
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "dry-run"=> \$opt_dry,
	   ) or exit 1;
usage unless @ARGV==1;

our ($branch)=@ARGV;#NOT @_ WHEN WILL I REMEMBER THAT.

# hm habe git modul sachen 'hm'.

#use Chj::Git::Functions ':all';
#our $git_dir= xgit_dir;

# well. what does this help, vs. using Git.pm

use Git;
{
    package CJ_GIT_PICK_PICKY::Git::Commit;
    sub is_merge {
	my $s=shift;
	@{$$s[1]}>1
    }
    sub sha1 {
	my $s=shift;
	$$s[0]
    }
}
{
    package CJ_GIT_PICK_PICKY::Git;
    use base 'Git';
    # assume it's a fixed Git.pm
    sub log_sha1_and_parents {
	my $s=shift;
	@_==1 or die "need revision (range) argument";
	my ($fh,$ctx)=$s->command_output_pipe ("log",'--pretty=format:%H:%P',@_);
	my @log=
	  #fullyeager..
	  map {
	      chomp;
	      my ($commit,$parents)= split /:/,$_,2
		or die "invalid line '$_'";
	      my @parents= split / /,$parents;
	      bless [$commit, \@parents],"CJ_GIT_PICK_PICKY::Git::Commit"
	  } <$fh>;
	$s->command_close_pipe ($fh,$ctx);
	\@log
    }
}

our $git= CJ_GIT_PICK_PICKY::Git->repository(Directory=> ".");#k? yep works even from subdirs.

# NOTE: git cherry-pick has a --mainline option, so I could maybe even
# pick merges. But maybe I *still* don't want to? (dunnoreally.)

for my $commit (reverse grep { not $_->is_merge } @{$git-> log_sha1_and_parents ("HEAD..$branch")}) {
    #( grep reverse   warum macht cperl mode verschiedene farben (f diese 2 kommandos) h.?.) (hautpsachefrbg)
    if ($opt_dry) {
	print "would cherry-pick ".$commit->sha1."\n";
    } else {
	$git->command ("cherry-pick", "-x", $commit->sha1);
    }
}

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
