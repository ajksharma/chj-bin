#!/usr/bin/perl -wT

##PS. muesste auch ' in patterns escapen, da ich sie '' einbinde?
# 21.5.2000:  ^- ja... bei Gelegengeit mal in exec umdefinieren
# 21.5.2000:  wollte eigenltlich modifizieren so dass nicht 'chris'
#       oder '*chris*' locate'd wird sondern '*chris[^/]*' aber
#       locate versteht echt keine kombination aus charakterklassen
#       und multiplikator. '*chris[^/]*' würde auch '.../chriss////s/s' finden.
# 13.9.2000: korrigiere Bug im Handling von ..(...|...|..) patterns (werden neu gleich wie [] rausgeschnitten)
# Sat, 22 Nov 2003 11:05:52 +0100  finally add -d option as synonym to -f

sub usage { print STDERR <<'END';

USAGE:
    loc [-i] description_of_file
or  loc [-i] -d description_of_folder
or  loc [-i] [-d] description -e[i] exclude_desc
or  loc [-i] [-d] description -ee[i] exclude_desc_on_whole_path

With the -d option, only folders are searched, else only files.
The description may be a literal part of the file/folder name,
or a perl style regular expression. If the description doesn't
contain any meta characters except dots '.', it's treated literally,
else it's meant to be a regexp (where you have to escape meta chars
with '\').
   In any case, only the name of the file/folder is searched, not
any other part of the path of the file. And you can specify the
whole file name this way:
    loc '^myfile\.txt$'
To prevent the shell from interpreting meta chars, put single quotes
around your search terms!

If you specify the -i option, the search (!) is case insensitive. (This
does not touch the exclude pattern - see below.)

Finally, you can give an 'exclude' description. File/folder names
matching this description are NOT displayed. If you specify -ee, the
whole file path is checked, -e only checks the item name. If you want
the exclusion terms to be case insensitive, specify the i option
after the e in the -e options.

LIMITATIONS:  handling of search patterns is not complete. For example
you may NOT use the 'or' syntax (like in '(some)|(other)'). Read the
first printed line to see what's being done. (This does not concern
exclusion patterns.)
This is a perl script which uses 'locate' and filters the output.
So it reflects the state of the file system at the time of the latest
update of the locate database.

(The name 'loc' is choosen by the author, of course you could call it
anything you like.)

END
#'
exit(0);
}

$loc='loc'; #name of this
$locate= '/usr/bin/locate';

# START

$numopt = @ARGV;
&usage unless $numopt;
&usage if $ARGV[0] eq '--help' or $ARGV[0] eq '-h';

foreach (@ARGV) {
    if (/^-[fd]$/) {$folders=1; next};
    if (/^-i$/) {$insensitive=1; next};
    do{$desc = $_; next} unless defined $desc;
    if (/^-e(e?)(i?)$/) {$exclude=1; $excludep=$1; $exinsensitive=$2; next};
    if ($exclude) {$exmatch = $_; next};
    die "$loc: too many arguments or wrong options.\n";
}
die "$loc: missing exclusion pattern\n" if $exclude and not defined $exmatch;

$metachars = '[\[\]\^\*\$+()\?\\\\]';  ##sure, this is not complete..

if ($desc=~ /$metachars/) {  # a pattern is given
    # 1. First, extract the longest part of the pattern without meta chars
    $p = $desc;
    # a) 'erase' [] parts 'cause these parts are not contiguous
    $p=~ s/(?<!\\)\[.*?(?<!\\)\]/./g;
    ##print "Vorher: '$desc'; Nach Lookbehindundso replace: '$p'\n";
    #    and also () parts since they are too complicated ...:
    $p=~ s/(?<!\\)\(.*?(?<!\\)\)/./g;

    # b) look for longest match
    $maxlen=0; $match='';
    $p=~ s| (?: [^\^\[\]\*\$\.\\]*  (?:\\[\^\[\]\*\$\.])?)+ |
      # '?':
      #my $a=$&;   aber wie soll ich mpe?g richtig behandeln? quatsch. 23.12.00

      ##print "Nonmetamatch: '$&'\n";
      if (length($&)>$maxlen) {
	  $maxlen= length($&);
	  $match=$&;
      }
    |exg;
    ##print "Longest match is: $match\n";
    $match=~ s/\\//g;

} else {  # literal
    $match = $desc;      # locate this
    # escape dots, so $desc can be used as perl matching pattern:
    $desc=~ s/\./\\./g;
}
if ($insensitive) {
    $match=~ s|[a-zA-Z]|'['.lc($&).uc($&).']'|eg
      #^the only way to tell locate to be insensitive?
      and $match = '*'.$match.'*';
    $desc= '(?i)'.$desc;
}

if ($exclude) {
    unless ($exmatch=~ /$metachars/) {
	$exmatch=~ s/\./\\./g;  # escape dots
    }
    if ($exinsensitive) {
	$exmatch= '(?i)'.$exmatch;

    }
    print STDERR "    (locate '$match', exclude '$exmatch' on ",do{
	$excludep and 'path' or 'item'
    },", filter '$desc')\n";
} else {
    print STDERR "    (locate '$match', filter '$desc')\n";
}

$fls=$fldrs=$n=0;
#^ for counting folders/files that are matching but not displayed
$nnn=$nn=0;

$match=~ /(^[^']*$)/ or die "Embedded \"'\" not yet supported.\n";
$smatch=$1;# (und schliesslich gebe das ja ich selber ein)
delete $ENV{PATH};delete $ENV{BASH_ENV};delete $ENV{ENV};
open LOC, "$locate '$smatch'|"  or die "could not fork, $!";
while (<LOC>) {
    $nnn++;
    next if $excludep and /$exmatch/o;
    chomp;
    $item = $_;
    # extract pure file name
    s|^.*/||;
    next if $exclude and not($excludep) and /$exmatch/o;
    $nn++;
    if (/$desc/o) {
	if (-d $item) {
	    if ($folders) {
		print $item,"\n";
	    } else {
		$n++
	    }
	    $fldrs++
	} else {
	    if ($folders) {
		$n++
	    } else {
		print $item,"\n";
	    }
	    $fls++
	}
    }
}
close LOC;


if ($folders) {
    do{ print STDERR "    (Found also $n file"
	  .do{$n>1 and 's' or ''}
	    ." matching your description.)\n"}
    if ($n);
} else {
    do{ print STDERR "    (Found also $n folder"
	  .do{$n>1 and 's' or ''}
	    ." matching your description. Use the -d option to display "
	      .do{$n>1 and 'them' or 'it'}.".)\n"}
    if ($n);
}

