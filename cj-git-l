#!/usr/bin/perl -w

# Sam Aug  4 09:08:25 CEST 2007
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname

  git list added/modified/deleted files. (obviously the latter only if
  they are still there, ehr)

  Options:
  --show-deleted   also show the deleted files (currently the default)
  --no-show-deleted   do not show the deleted files

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our $opt_show_deleted=1;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "show-deleted"=> \$opt_show_deleted,
	   # hm Getopt(::Long) does not support no-*?
	   "no-show-deleted"=> sub{$opt_show_deleted=0},
	   ) or exit 1;
usage if @ARGV;


use Chj::IO::Command;
use Chj::Unix::exitcode;
use Encode 'decode_utf8';

sub git_unquote_path ( $ ) {
    my ($str)=@_;
    if ($str=~ /^\"/) {
	my ($str2)= $str=~ m/^\"(.*)\"\s*\z/
	  or die "invalid quoted string?: '$str'";
	#####HACKY ABSOLUTELI UNCORRECLT fo rnow
	my $s= [ split /\\/, $str2 ];
	my $r= [];
	push @$r, shift @$s;
	# now have to split off the \d+ parts huh.
	#for my $piece (@$s) {
	#need $i+1 access.'doh'
	my $len= @$s;
	my $flag_last_was_backslash=0;
	for (my $i=0; $i<$len; $i++) {
	    my $piece= $$s[$i];
	    if ($piece =~ s/^(\d+)//) {
		push @$r, chr(oct $1), $piece;
	    #} elsif $piece =~ m/^\\/  EHR that can  never happen right? here's the HACK/wrong bit.
	    } else {
		#hmm. ah yep if it is empty?
		# (shoult put this test to above--but doesn't matter except for computational cost)
		if (length $piece) {
		    # backslash before text ? ah, \n and such uuhm.
		    if ($piece=~ s/^([nrt\"])//) {
			my $thing=$1;
			push @$r, do {
			    if ($thing eq "n") {
				"\n"
			    } elsif ($thing eq "r") {
				"\r"
			    } elsif ($thing eq "t") {
				"\t"
			    } elsif ($thing eq '"') {
				$thing
			    } else {
				die "??"
			    }
			}, $piece
		    } else {
			die "unknown text after backslash: '$piece'";
		    }
		} else {
		    # okso it was a backslashed backslash, *except* if it's the last?
		    if ($flag_last_was_backslash) {
			push @$r, "\\";
			$flag_last_was_backslash=0;
		    } else {
			if (length $$s[$i+1]) {
			    push @$r, "\\";
			    $flag_last_was_backslash=1;
			} else {
			    die "backslash at end of string: '$str'";
			}
		    }
		}
	    }
	}
	decode_utf8(join "", @$r)
    } else {
	$str   # correct, are thingies needing unquote always in double quotes?
    }
}

sub files {
    my $g= Chj::IO::Command->new_sender("git", "status");

    my %files;
    my $do_accept_pipeerror;
    while (<$g>) {
	if (/^# Untracked files/) {
	    $do_accept_pipeerror=1;
	    last;
	}
	chomp;
	if (/^#\s+(modified|deleted|added|new file):\s+(.*)/) {
	    # ^ hm it seems 'added' isn't used
	    my ($what,$path)=($1,$2);
	    $files{git_unquote_path($path)}=$what;
	}
    }
    my $rv= $g->xfinish;
    $rv==0 or $rv==1<<8  # (1 is when nothing's ready to commit)
      or ($do_accept_pipeerror and
	  ($rv == 141<<8
	   or
	   $rv == 13 # sigpipe
	  ) #and warn "ignoring pipe err"
	 )
	# 141 is the exit code it seems to return in this case
      or die "git-status exited with an error (".Chj::Unix::exitcode($rv).")";
    \%files
}


#use Chj::repl;repl;
#__END__

my $modmap= {
	     modified=>"M",
	     deleted=> "D",
	     'new file'=> "A"
	    };
sub main {
    my $files= files;
    my @deletedfiles= grep {
	$$files{$_} eq "deleted"
    }
      keys %$files;
    my @nondeletedfiles= grep {
	$$files{$_} ne "deleted"
    }
      keys %$files;
    #^gern wieder mal  split eines hashes nach bestimmten mustern.
    # statt multiple greps.  'sigh?..'
    return unless @nondeletedfiles;
    if ($opt_show_deleted) {
	for my $file (@deletedfiles) {
	    my $kind= $$files{$file};
	    #^ files variable should be called fileskind
	    {
		my $kind= $$modmap{$kind} or die;
		print "$kind                  $file\n"
		  or die "printing to stdout: $!";
	    }
	}
    }
    my $l= Chj::IO::Command->new_sender ("l", @nondeletedfiles);
    while (<$l>) {
	chomp;
	# chop off '-rw-r--r-- 1 clamavbuild clamavbuild 4119'
	s/^([-l])[-rwSstx]{9} +\d+ +\S+ +\S+ +\d+ +//
	  or die "line dos not match: '$_'";
	my $type= $1;
	/^\S+ +\S+ +(.*)/ or die "line (date part) does not match: '$_'";
	my $file=$1;
	if ($type eq "l") {
	    $file=~ s/ -> .*//s;
	}
	$file= decode_utf8($file); #right?. need to, for accessing the hash correctly.
	my $kind= $$files{$file} or die "bug ('$file')";
	{
	    my $kind= $$modmap{$kind}
	      or die "bug '$kind'";
	    #^need the my. or the die would print the new, undef, value. tja.
	    print "$kind ",$_,"\n" or die "printing to stdout: $!";
	    #^- in the case of symlinks, could print $file instead; $_
	    #will still contain the " -> .." part. But maybe it's good
	    #for now to visually warn me of this currently.
	}
    }
}

main;
