#!/usr/bin/perl -w

# Son Feb 10 05:27:47 CET 2008
(my $email='pflanze%gmx,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [--] cmd [args] '<>' [args]

  maps stdin to stdout, running cmd with args and the input record
  value substituted for the '<>' position, writing the output of the
  cmd to stdout.

  currently 'records' means 'lines'.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   ) or exit 1;
usage unless @ARGV;

my @cmd=@ARGV;

# find the <> argument position:
our $pos;
{
    my $i=0;
    for (@cmd) {
	if ($_ eq '<>') {
	    if (defined $pos) {
		die "$myname: @cmd: multiple '<>' given\n";
	    }
	    $pos= $i;
	}
	$i++
    }
}
defined $pos
  or die "$myname: missing '<>'\n";

use Chj::IO::Command;

my $recordsep="\n";
local $/= $recordsep;
#^- already prepare for changes.

while (<STDIN>) {
    chomp;
    $cmd[$pos]=$_;
    # since we care about the record separator being output always
    # correctly, we filter the output ourselves:
    my $s= Chj::IO::Command->new_sender(@cmd);
    my $out= $s->xcontentref;
    $s->xxfinish;
    chomp $$out;
    print $$out,$recordsep
      or die "$myname: error writing to stdout: $!\n";
}

#use Chj::ruse;use Chj::Backtrace; use Chj::repl; repl;
