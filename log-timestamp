#!/usr/bin/perl -w

# Don Jun 28 15:17:21 MEST 2007   finally,ey?
(my $email='pflanze%gmx,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [ cmd arguments ]

  Prepend timestamps to each line.
  By default, use the localtime() format.

  If no cmd is given, read from stdin and write to stdout.

  If cmd is given, run it and read both it's stdout and stderr.

  Options:
  --hires|-H  output subseconds, use (almost) the same format as 'tai64|tai'
              (there are only 6 subsecond digits as opposed to 9)
  --to file   write to the given file instead of stdout.
              it is opened in append mode.
#  --specify   add a column with 'E' for stderr and 'O' for stdout  not implemented, requires threads/multiple processes (ok best way) or select.
  --pid       add a column with the pid of the forked cmd  not implemented

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

$|++;

my @args;
my $DEBUG=0;
our $opt_hires;
our $opt_to;
our $opt_pid;
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
    	usage
    } elsif ($_ eq '--') {
    	push @args, @ARGV[$i+1..$#ARGV];
    	last;
    } elsif (/^--?d(ebug)?$/) {
	$DEBUG=1;
    } elsif (/^--?hires$/) {
	$opt_hires=1;
    } elsif (/^-H$/) {
	$opt_hires=1;
    } elsif (/^--?to(?:=(.*))?$/) {
        if (defined $1) {
            $opt_to=$1
        } else {
            $opt_to=$ARGV[++$i] or usage "missing argument for '$_' option";
        }
    } elsif (/^--?pid$/) {
	$opt_pid=1;
    } elsif (/^-./) {
    	usage("Unknown option '$_'\n");
    } else {
    	push @args, @ARGV[$i..$#ARGV];
    	last;
    }
}

if ($opt_pid) {
    @args or usage "can't handle --pid option without a command";
}

use Fcntl qw(:DEFAULT :flock :seek :mode);

if ($opt_to) {
    sysopen STDOUT, $opt_to, O_WRONLY|O_APPEND|O_CREAT
      or die "$myname: openint log file '$opt_to': $!\n";
}

my $pid;
if (@args) {
    pipe READ,WRITE or die "pipe: $!";
    $pid= fork;
    defined $pid or die "$myname: could not fork: $!\n";
    if ($pid) {
	close WRITE or die $!;
	open STDIN,"<&READ" or die $;
    } else {
	close READ or die $!;
	open STDOUT,">&WRITE" or die $!;
	open STDERR,">&STDOUT" or die $!;
	exec @args
	  or exit(127);#k?.
    }
}

if ($opt_hires) {
    require Time::HiRes;
    while (<STDIN>) {
	#my $t= Time::HiRes::time();
	#my $t_full=
	my ($seconds, $microseconds) = Time::HiRes::gettimeofday();
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($seconds);
	printf '%4d-%02d-%02d %02d:%02d:%02d.%06d %s',
	  $year+1900, $mon, $mday, $hour,$min,$sec, $microseconds, ($opt_pid ? "($pid) $_" : $_)
	    or die "printing to stdout: $!";
    }
} else {
    while (<STDIN>) {
	print localtime()."  ".($opt_pid ? "($pid) $_" : $_)
	  or die "printing to stdout: $!";
    }
}

if ($pid) {
    waitpid $pid,0
      or die "waitpid: $!";
    $? == 0 or warn "$myname: subcommand exited with ".($? > 255 ? "status code ".($?>>8) : "signal $?")."\n";#well. just because I don't want to load much code?..
}

close STDIN or die $!;
close STDOUT
  or die "$myname: closing ".($opt_to ? "'$opt_to'" : "stdout").": $!";


#Thu Jun 28 15:18:22 2007  fewf

#vs. apachelog:
#74.6.26.207 - - [24/Jun/2007:06:36:27 +0200] "GET /feedback/eingabe/?forum_p=unipoly%3Bforum_t=Duell+zu+Wasser HTTP/1.0" 200 14699 "-" "Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)"

#syslog:
#Jun 24 10:31:22 ethlife-a -- MARK --

#tai64n|tai:
#2007-06-28 15:19:50.481778500 fwef

#whatever?.

