#!/usr/bin/perl -w

# Fri May  6 22:52:06 EDT 2011
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname dir(s)

  Set mtime of dir, and, recursively, all of its child directories to
  the latest inferred creation time of all items contained in it.

  Algorithm for deriving creation times:

  - for files, take the older of atime and mtime
  - for directories, take the oldest creation time of all contained
    items; if empty, ignore it

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
#our $opt_dry;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   #"dry-run"=> \$opt_dry,
	   ) or exit 1;
usage unless @ARGV;


{
    package CHJdirmtimepull::item;
    use Class::Array -fields=> -publica=>
      (
       'path',
       'stat',
      );
    sub new {
	my $cl=shift;
	bless [@_],$cl
    }
    end Class::Array;
}

{
    package CHJdirmtimepull::file;
    use Class::Array -extend=> -publica=>
      (
      );
    use Chj::Env 'min';
    sub creationtime {
	my $s=shift;
	my $st= $$s[Stat];
	min($st->atime, $st->mtime)
    }
    end Class::Array;
}

{
    package CHJdirmtimepull::dir;
    use Class::Array -extend=> -publica=>
      (
       '_items', # array of CHJdirmtimepull::item
       '_creationtime',
      );
    use Chj::Env 'min';
    sub items {
	my $s=shift;
	$$s[_Items]||= do {
	    my @it;
	    my $path=$$s[Path];
	    my $d= xopendir $path;
	    while (defined (my $item= $d->xnread)) {
		push @it, main::xlstatitem("$path/$item");
	    }
	    $d->xclose;
	    \@it
	}
    }
    our $creationtime_none= -3; #wl
    sub maybe_creationtime {
	my $s=shift;
	my $ct= $$s[_Creationtime]||= do { #olde doof wegen 0=falsewllnone h. (oder, kein op)
	    my @ct= map { $_->creationtime } @{$s->items};
	    if (@ct) {
		min @ct
	    } else {
		$creationtime_none
	    }
	};
	($ct == $creationtime_none ? undef : $ct)
    }
    sub mtime {
	my $s=shift;
	
    }

    # action:
    use Chj::xperlfunc 'xutime';
    sub write_mtime {
	my $s=shift;
	xutime ($s->path, $s->stat->atime, $s->mtime)
    }
    end Class::Array;
}

use Chj::xperlfunc ':all';

sub xlstatitem {
    my ($path)=@_;
    my $s= xlstat $path;
    ($s->is_dir ? "CHJdirmtimepull::dir" : "CHJdirmtimepull::file")->new($path,$s)
}


#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
