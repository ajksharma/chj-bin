#!/usr/bin/perl -w

# Fre Feb 27 16:34:02 MET 2004
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;


use URI::Escape 'uri_escape';
use Chj::ulimit;
use Chj::Cwd;
use Chj::xperlfunc;

sub basename {
    my $str=shift;
    $str=~ s|.*/||s;
    $str
}

# if (@ARGV) {
#     next if /^-/;
#     next if /^(http|ftp|gopher|telnet):/i;
#     # zurückschreiben wenn die func es nicht unterstützt? na nich mal perl unterstützt es ja? $_="fdfdf" isch nix. nur s/// zeug? ev noch $_++?
#     # also bleibt das kopieren des arrays?


my @args=
  # cj Fri, 10 Sep 2004 17:19:17 +0200 och, muss auch ( ) escapen:
#   map {
#       s/\(/\%28/sg;
#       s/\)/\%29/sg;
#       $_
#   }
# nein, das wars nicht. mann. ev zu langer file name?.-> see below
  map {
    #uri_escape $_
    # nun ist es so geil dass /usr/bin/galeon www.psg.com/%7Edlamkins/sl/cover.html das nonexistente file aufmachen will whereas www.psg.com/%257Edlamkins/sl/cover.html was existieren würde tut http assumen.
    # exist oder nich is egal, das %25 drin macht den unterschied.
    # if (
    # nun ja, sowieso annehmen es sei ein pfad nun.
    #my $path= uri_escape $_;
#    m|^/| ? "file://".uri_escape($_) : uri_escape "file://".cwd."/".$_
#} grep {
#    not /^-/ and not /^(http|ftp|gopher|telnet|file):/i;
# MANN ich idiot
      my $dir= do{
	  my $d=$_;
	  $d=~ s|[^/]*\z||s;
	  #length($d)? $d : "./";  eh geht eh direkt
	  $d
      };
      my $origpath= $_;

      my $res=do {
	  if (not /^-/ and not /^(http|ftp|gopher|telnet|file):/i) {
	      m|^/| ? "file://".uri_escape($_) : uri_escape "file://".cwd."/".$_
	  } else {
	      $_
	  }
      };
      # cj  Fri, 10 Sep 2004 17:19:17 +0200
      my $ret;#hackhacknonfunc
      #warn "res=$res";
      #if ($res > 40) { ECH
      if (length(basename($res))>80  and not $res=~ m/^(?:http|ftp|mailto|nntp|telnet):/i) { # cj 21.11.04 das protokollanschauen angefügt. mann spaghetti
	TRY:{
	      my $lastpath;
	      for (1..3) {
		  my $randomname= ".randomlink_".int(rand(400100));
		  my $rndpath= "$dir$randomname";
		  $lastpath= $rndpath;
		  print STDERR "$0: might be too long filename, linking it to a short one: $randomname\n";
		  link $origpath,$rndpath and #last TRY;#och. return $rndpath  och.
		    do {
			$ret=$rndpath;
			last TRY;
		    };
	      }
	      #die "could not hardlink '$origpath' to '$rndpath': $!";  öh gibt es hier auch nicht mehr.
	      die "could not hardlink '$origpath' to something like '$lastpath': $!";
	  }
      } else {
	  #warn "KURZ";
	  $ret=$res;
      }
      $ret;
} @ARGV;


#my $lckfile= "$ENV{HOME}/.galeon_lck";
use Chj::xopendir;
sub is_running {
    #hm shit. actually i need a semaphore? or can I detect if some process has the file still open?
    #hm pthread (nptl) semaphores?

    #what if some gui/whatever did start galeon w/o our script opening the lck/semaphore?
    #so still just scan proc?

    my $base= "/proc";
    my $d=xopendir $base;
    my $uid= $>;
    #while (<$d>) { FALSCH GRRRRRRRRRRRRR und keine exn
    while (defined($_=$d->xnread)) {
	next unless /^(\d+)\z/;
	my $sub= "$base/$1";
	if (local our $s= Xstat $sub) {
	    #use Chj::repl;repl;
	    if ($s->uid == $uid) {
		if (defined (my $f= readlink "$sub/exe")) {
		    #warn "checking '$f'";
		    $f=~ s|.*/||s;
		    return 1 if ($f eq "galeon" or $f eq "galeon-bin");
		}
	    }
	}
    }
}

sub keep_file {
    my ($path,$add)=@_;
    #warn "keeping '$path' with suffix '_$add'";  better let keep output the real path.for copy pasting.
    {
	local $|=1;
	print "keeping: ";
    }
    xxsystem "keep","--verbose", $path,($add? ("-a", "_$add"):());
}

sub Chomp {
    my ($s)=@_;
    chomp $s;
    $s
}
sub maybe_keep_session_crashed_file {
    my $file= "$ENV{HOME}/.galeon/session_crashed.xml";
    (keep_file $file, Chomp `date_`) if -e $file;
}

maybe_keep_session_crashed_file unless is_running;


# "the next galeon"? SUPER like? geht das?

#ps.  subkommandos welche von galeon allenfalls ja ausgeführt würden,
#haben den PATH auch wieder nicht. dumme Idee also?

sub strip_from_PATH {
    my $path=$ENV{PATH};
    for (@_) {
	#$path=~ s/(?:^|:)\Q$_\E(?::|\z)/:/s;
	$path=~ s/(?:^|:)$_(?::|\z)/:/s; # attention, accept regexes!
    }
    $ENV{PATH}=$path
}

strip_from_PATH((split /:/, "/root/bin:/root/local/sbin:/root/sbin"),
		'/home/[^/]+/bin');

# na, eigentlich reichts den eigenen path zu strippen, right?
my $path=$0; $path=~ s|/[/]+\z||s;
#strip_from_PATH "\Q$path\E"; #geht das?
strip_from_PATH quotemeta $path;

# und nun das ulimit dings auch hier einbauen   oder ?
# ja sinnvollerweise.

#ulimit qw(-v 200000); # die Idee davon ist *rauf*setzen von 110000 oder so default.
# cj Fri, 19 Aug 2005 16:29:35 +0200:
ulimit qw(-v 400000); # die Idee davon ist *rauf*setzen von 110000 oder so default.

delete $ENV{MOZILLA_FIVE_HOME};


xexec "galeon",@args;

