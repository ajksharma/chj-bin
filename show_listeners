#!/usr/bin/perl

#lsof -i -n|egrep '(LISTEN|UDP)'|awk '{print $7 " " $3 " " $1 " " $8 }'|sort -t ' ' -t ':' -k 1 -n -k 4|uniq
# oder so. sort ist zu schwierig

#netstat -t inet -p -l
#netstat -t inet -p -l -n

# Ich will:
# sortiert nach:
# 1. TCP dann UDP.
# 2. Nach ip
# 3. Nach port

# Sam Jan 18 01:54:37 MET 2003
# pflanze@gmx.ch

use strict;

$0=~ /([^\/]+)$/s or die "?";
my $myname=$1;
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [ options ]
  Print listener processes, with the help of netstat.
  Options:
  -t  --head(er|ing)  Print a header line.
  -s  --short(name)   Only print command name, no arguments.
  -w  wide output, do not truncate last column
";
exit @_ ? 1 : 0;
}

my @files;
my $DEBUG=0;
my ($opt_w,$opt_h,$opt_s);
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
    	usage
    } elsif ($_ eq '--') {
    	push @files, @ARGV[$i+1..$#ARGV];
    	last;
    } elsif (/^--?d(ebug)?$/) {
	$DEBUG=1;
    } elsif (/^--?w(ide)?$/) {
	$opt_w=1;
    } elsif ($_ eq '-t' or /^--h(ead(er|ing)?)?$/) {
	$opt_h=1;
    } elsif ($_ eq '-s' or /^--short(name)?$/) {
	$opt_s=1;
    } elsif (/^-/) {
    	warn "Unknown option '$_'\n";
    	usage(1)
    } else {
    	push @files, $_
    }
}
usage if @files;


my @lines= `netstat -A inet -p -l -n`;
((shift @lines)=~/^(udp|tcp)/ and die) for (1..2);

my @records;
for (@lines ){
    chomp;
    #/^(\w+)\s+\d+\s+\d+\s+(\d+\.\d+\.\d+\.\d+)\:(\d+)\s+  / or die "Line '$_' does not match";
#    s/ LISTEN //; # so to make udp and tcp look same
#cj Sun, 19 Jun 2005 03:24:43 +0200
#HMM, there is also raw socket stuff and those look yet even different:
#tcp        0      0 0.0.0.0:22491           0.0.0.0:*               LISTEN      490/gnuserv
#udp        0      0 0.0.0.0:53              0.0.0.0:*                           285/dnscache
#raw        0      0 0.0.0.0:1               0.0.0.0:*               7           786/ping

    my ($prot,$ip,$port,$pid,$progname);
    if (s/\s(\d+)\/(\S+)//) {# or die "no match
	($pid,$progname)=($1,$2)
    }
    my @cols= split /\s+/;
    $prot=$cols[0];
    ($ip,$port)= split /:/, $cols[3];
    push @records,[$prot,$ip eq '0.0.0.0' ? '*' : $ip,$port,$pid,$progname];
}

sub getuserfrompid{
    my ($pid)=@_;
    return 0 if $pid eq "-"; # kernel thread?
    $pid=~ /^\d+$/s or die "This is not a pid: '$pid'";
    if (open PIDIN,"</proc/$pid/status") {
	local $/; my $a=<PIDIN>; close PIDIN or die $!;
	$a=~ /^Uid:\s*(.*)/m or die "could not find Uid entry in /proc/$pid/status:\n$a\n ";
	my @uids=split /\s+/,$1;
	my %uids;
	$uids{$_}=undef for @uids;
	#if (exists $uids{0}){
	#    "root"
	#} else {
	    join ",", map {scalar getpwuid $_} sort keys %uids
	#}
    #} else { die $! }
    } else { die "pid '$pid': $!\n" }
}
sub getproggyfrompid{
    my ($pid)=@_;
    return "(kernel thread?)" if $pid eq "-"; # kernel thread?
    $pid=~ /^\d+$/s or die "This is not a pid: '$pid'";
    if (open PIDIN,"</proc/$pid/cmdline") {
	local $/; my $a=<PIDIN>; close PIDIN or die $!;
	$a=~ tr/\0/ /;
	$a
    } else { die "pid '$pid': $!\n" }
}

my ($prot,$ip,$port,$pid,$progname); my ($user,$proggy);
my $lastcol;
if ($opt_w) {
    $lastcol= "*";
} else {
    my $linelength= $ENV{COLUMNS} || 80;
    $lastcol= "<" x ( $linelength - 3 - length
'@<<<  @>>>>>>>>>>>>>>> @<<<<< @|||||||... @>>>>> @') . "...";
}
my $format= <<'END';
format STDOUT=
@<<<  @>>>>>>>>>>>>>>> @<<<<< @|||||||... @>>>>> @LAST
$prot $ip              $port  $user       $pid   $proggy
.
END
$format=~ s/LAST/$lastcol/;
eval $format; die if $@;

if ($opt_h) {
    print <<'END';
Proto               Ip Port     User(s)      Pid Command
END
}
for (sort { $a->[0] cmp $b->[0]
	      or
		$a->[1] cmp $b->[1]
		  or
		    $a->[2] <=> $b->[2] } @records) {
    #print join(" ",@$_),"\n";
    ($prot,$ip,$port,$pid,$progname)=@$_;
    eval {
	$user=$proggy="???";
	$user= getuserfrompid($pid);
	$proggy= $opt_s ? $progname : getproggyfrompid($pid);
    };
    if (ref$@ or $@) {
	print STDERR $@;
    } else {
	write;
    }
}
