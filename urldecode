#!/usr/bin/perl -w

# Fre Aug 10 20:46:00 CEST 2007
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [-e] (..)

  decode, or, with -e, encode urls

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

my @args;
my $DEBUG=0;
our $opt_e;
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
    	usage
    } elsif ($_ eq '--') {
    	push @args, @ARGV[$i+1..$#ARGV];
    	last;
    } elsif (/^--?d(ebug)?$/) {
	$DEBUG=1;
    } elsif (/^--?e(ncode)?$/) {
	$opt_e=1;
    } elsif (/^-./) {
    	usage("Unknown option '$_'\n");
    } else {
    	push @args, $_
    }
}
@ARGV=@args;

use URI;
use Encode;

sub url_decode {
    my ($str)=@_;
    local our $u= URI->new($str);
    local our $str2= $u->uri_unescape;
    decode("utf-8", $str2, Encode::FB_CROAK)
}

sub url_encode {
    my ($str)=@_;
    #my $str= decode("utf-8", $_str, Encode::FB_CROAK);
    #  -- nope, actually *want* it as utf-8 code points.
    #local our $u= URI->new($str);
    #hm no method for that.
    $str=~ sé(.)é
      my $c=$1;
      my $n= ord $c;
      if ($c=~ /[A-Za-z0-9_-]/) { # wow $c=~ /\w/ doesn't work, umlauts are not encoded
	  $c
      } else {
	  '%'.sprintf('%02X',$n)
      }
    éseg;
    $str
    #use Chj::repl;repl;
}

our $code= $opt_e ? \&url_encode : \&url_decode;

sub code {
    my ($str)=@_;
    $str=~ s/([\r\n]*)\z//s;
    my $eol= $1;
    &$code($str).$eol
}

#our $foo= url_decode 'induktivit%C3%A4ten+s%C3%A4ttigung';
#use Chj::repl;repl;

while (<>) {
    print (code ($_)) or die "printing to stdout: $!"
}

