#!/usr/bin/perl -w

# Tue Nov 11 11:18:22 CET 2008
(my $email='christian-novo%jaeger,mine,nu')=~ tr/%,/@./;

use strict;


$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);

our $datadir= do{$ENV{HOME}|| die "missing HOME env var"}."/.$myname";
our $default_interface="eth0";

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [ interface ]

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   ) or exit 1;
#usage if @ARGV ;

sub debug {
    print STDERR "$myname: ",join(" ", @_),"\n"
      if $verbose;
}

mkdir $datadir, 0700;

sub data_subdir ( $ ) {
    my ($subdir)=@_;
    my $path="$datadir/$subdir";
    mkdir $path;
    $path
}

use Chj::FileStore::MIndex;
our $ip_store= Chj::FileStore::MIndex->new(data_subdir ("ip_store"));
use Chj::FileStore::PIndex;
our $attr_store= Chj::FileStore::PIndex->new (data_subdir ("attr_store"));

use Chj::DNS 'ip_reverse_lookup';

# ip -> domainname.

sub _resolveadd ($ ) {
    my ($ip)=@_;
    $ip_store->add ($ip,
		    ip_reverse_lookup($ip));
}

# use the list mode of is_if_up, but filter out irrelevant entries right.
#multiple methods. thusmake it a package.blessedobj.
{
    package CHJ::recordip::ifaces;
    use Class::Array -fields=>
      -publica=>
	('hash');
    use Chj::is_if_up 'is_if_up';
    sub new_now {
	my $class=shift;
	my $s= $class->new;
	$s->init;
	$s
    }
    sub init {
	my $s=shift;
	my $hash=
	  +{
	    map {
		@$_
	    } is_if_up
	   };
	#^ ok doesn't check for doubles. but *should* not happen right?
	# well perl _should_ have a hash constructor which complains.(...)
	$$s[Hash]=$hash;
    }
    sub interfacenames {
	my $s=shift;
	grep {
	    $s->is_relevant_interface ($_)
	} keys %{$$s[Hash]}
    }
    sub ips {
	my $s=shift;
	map {
	    $$s[Hash]{$_}
	} $s->interfacenames
    }
    sub Mk_sortedstringie {
	my ($method)=@_;
	sub {
	    my $s=shift;
	    join ("|",sort $s->$method)
	}
    }
    *interfacenames_string= Mk_sortedstringie ("interfacenames");
    *ips_string= Mk_sortedstringie ("ips");
    sub maybe_ip_of_interface {
	my $s=shift;
	my ($interface)=@_;
	$$s[Hash]{$interface}
    }
    sub ip_of_interface {
	my $s=shift;
	my ($interface)=@_;
	$s->maybe_ip_of_interface ($interface)
	  or die "interface not up or known: '$interface'";
    }
	
    ## the one special thing for this here. otherwise this code could/should go into Chj::is_if_up or so right?.todo.
    #'parametrization':
    sub is_relevant_interface {
	my $proto=shift;
	my ($if)=@_;
	not ($if eq "lo"
	     or
	     $if=~ /:/)
    }
}

sub recordips {
    my (@interfaces)=@_;
    my $ifaces= CHJ::recordip::ifaces->new_now (@interfaces);
    if (my $ip= is_if_up $interface) {
	debug "interface '$interface' is at ip '$ip'";
	my $resolveadd=
	  sub {
	      _resolveadd ($ip);
	      $attr_store->set ("lastip",$ip);
	  };
	if (my $lastip= $attr_store->maybe_get("lastip")) {
	    if ($lastip eq $ip) {
		debug "lastip is '$ip' already, so do not look-up&add-reverse-entry again";
	    } else {
		debug "ip is different from lastip '$lastip'";
		&$resolveadd
	    }
	} else {
	    debug "no lastip entry yet";
	    &$resolveadd
	}
    } else {
	debug "interface '$interface' is not up"
    }
}

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
#__END__

if (@ARGV) {
    recordips @ARGV
} else {
    recordips $default_interface
}

