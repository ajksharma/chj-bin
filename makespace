#!/bin/bash

set -euo pipefail
IFS=

maxdeletions=20

usage () {
    echo "usage: $0 dirpath wanted-freespace-bytes [keep-bytes]"
    echo
    echo "  Unlinks the oldest files from dirpath until wanted-freespace-bytes"
    echo "  is available on the partition holding the directory."
    echo "  If keep-bytes is given, files holding collectively up to this many"
    echo "  bytes are not deleted even if wanted-freespace-bytes cannot be "
    echo "  satisfied."
    echo 
    echo "  A maximum number of $maxdeletions files are deleted in one call "
    echo "  (see --maxdeletions)."
    echo
    echo "  Options:"
    echo "    --maxdeletions n    use n instead of $maxdeletions"
    exit 1
}


declare -a args
args=()

while [ "${#@}" -gt 0 ]; do
    case "$1" in
	-h|--help)
	    usage  # (defaults may already have been changed at that point!)
	    ;;
	--maxdeletions)
	    shift
	    maxdeletions="$1"
	    shift
	    ;;
	*)
	    args[${#args[@]}]="$1"
	    shift
	    ;;
    esac
done

if [ "${#args[@]}" -lt 2 ]; then
    usage
fi

dirpath=${args[0]}
wantedspace=${args[1]}
keepbytes=${args[2]-0}


DEBUG () {
    if [[ ${DEBUG-} != "" ]]; then
	echo "$@" >&2
    fi
}

fs_available () {
    local path="$1"
    LANG=C df --block-size=1 -- "$path" | perl -we '
@l= <STDIN>;
@l or exit 1; # df error
@l==2 or die "bug1";
($h,$v)=@l;
$h=~ /^(?:\S+\s+){3}Available\b/ or die "bug2: $h";
$v=~ /^(?:\S+\s+){3}(\d+)\s/ or die "bug3: $v";
print "$1\n" or die $!
'
}

file_used () {
    local path="$1"
    du -s --bytes -- "$path" | perl -we '
@l= <STDIN>;
@l or exit 1; # df error
@l==1 or die "bug4";
($v)=@l;
$v=~ /^(\d+)\s/ or die "bug5: $v";
print "$1\n" or die $!
'
}


dir_files () {
    test -d "$1"
    local t
    t=`tempfile`
    find "$1" -type f -print0 |Â»0 ls -rt > "$t"
    echo "$t"
}

first () {
    head -1 -- "$1"
}

rest () {
    tail --lines=+2 -- "$1" || {
	# be insensitive to SIGPIPE (XX Linux specific error code)
	if [[ $? != 141 ]]; then
	    echo "tail failure" >&2
	    false
	fi
    }
}

files_use_more_than () {
    local bytes="$1"
    (
	local tot
	tot=0
	local u
	while read -r file; do
	    DEBUG "checking $file"
	    u=`file_used "$file"`
	    (( tot+= u ))
	    if [[ $tot -gt $bytes ]]; then
		echo yes
		exit 0
	    fi
	done
	echo no
    )
}

redo () {
    local numdeletions
    numdeletions="$1"
    DEBUG "numdeletions=$numdeletions"
    
    if [[ $numdeletions -lt $maxdeletions ]]; then
	local avail
	avail=`fs_available "$dirpath"`

	if [[ $avail -lt $wantedspace ]]; then
	    local files
	    files=`dir_files "$dirpath"`
	    local keptOK
	    keptOK=`rest "$files" | files_use_more_than "$keepbytes"`

	    if [[ $keptOK = yes ]]; then
		# can actually delete some
		f=`first "$files"`
		DEBUG "deleting '$f'"
		if [[ ${DRY_RUN-} = "" ]]; then
		    rm -- "$f"
		fi
		redo $(( numdeletions + 1 ))
	    fi
	fi
    fi
}

redo 0

DEBUG "OK."
