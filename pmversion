#!/usr/bin/perl -w

use strict;

$0=~ /([^\/]+)$/s or die "?";
my $myname=$1;
sub usage {
    print "$myname [-I path] Module::Name
  Tries to load the given module and prints it's ::VERSION variable.
  -I prepends path to \@INC
  -Mmodule[=function,function]  same as perl option of the same name
";
exit;
}


my @modules;

for (my $i=0; $i<=$#ARGV; $i++) {
    local $_= $ARGV[$i];
    if (/^-I$/) {
        unshift @INC, $ARGV[++$i];
    }
    elsif (/^-M(.*)/s) {
	my ($val)=$1;
	if (length $val) {
	    my ($module, $imports)= split /=/,$val,2;
	    my @imports= split /,/,$imports if $imports;
	    eval 'use '.$module.' '.
	      join(", ",map{my $s=$_; $s=~ s/\'/\\\'/sg; "'$s'"} @imports).";";
	    die $@ if $@;
	}
    }
    elsif ($_ eq '--') {
        push @modules, $ARGV[$i..$#ARGV];
    }
    elsif (/^-/) {
        usage
    }
    else {
        push @modules, $_
    }
}

usage unless @modules;

for my $module (@modules) {
    my $pathy = $module;
    $pathy=~ s/::/\//sg;
    $pathy .=".pm";  # unless /\.p[ml]$/s;  no we are *pm*version hey
    if (eval { require $pathy; 1 }) {
        print "$module: ";
        print exists $INC{$pathy} ?
                "'$INC{$pathy}', "
            :   "unknown file?, ";
        no strict 'refs';
        if (defined (my $v= ${$module."::VERSION"})) {
            print "VERSION $v\n";
        } else {
            print "no version information available\n";
        }
    } else {
        print "$module: $@\n";
    }
}

# could run VERSION as a method?:
#    perl -MModule::Name -le 'print Module::Name->VERSION';
#http://www.panix.com/~comdog/brian's_guide.pod

